{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAE9BC,EAAaH,EAAKE,cAAc,uBAChCE,EAAYJ,EAAKE,cAAc,sBAC/BG,EAAcL,EAAKE,cAAc,wBAOrC,SAAOI,EAAcC,EAAUC,GAE9B,OAAM,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAKpCJ,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAKPR,EAAKe,iBAAiB,UAAU,SAAAC,GAC9BA,EAAMC,iBAOJ,IALD,IAAGC,GAAcf,EAAWgB,MACzBC,GAAahB,EAAUe,MACvBE,GAAUhB,EAAYc,MAGjBG,EAAI,EAAGA,EAAID,EAAQC,IAAK,CAG/BhB,EAAcgB,EAAI,EADGJ,EAAaI,EAAIF,GAWnCG,MAAK,SAAAC,G,IAAGjB,EAAQiB,EAARjB,SAAUC,EAAKgB,EAALhB,MACjBiB,EAAA3B,GAAS4B,OAAOC,QACd,uBAAwCC,OAAfrB,EAAS,QAAYqB,OAANpB,EAAM,M,IAIjDqB,OAAM,SAAAL,G,IAAGjB,EAAQiB,EAARjB,SAAUC,EAAKgB,EAALhB,MAClBiB,EAAA3B,GAAS4B,OAAOI,QACd,sBAAuCF,OAAfrB,EAAS,QAAYqB,OAANpB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nconst delayInput = form.querySelector('input[name=\"delay\"]');\nconst stepInput = form.querySelector('input[name=\"step\"]');\nconst amountInput = form.querySelector('input[name=\"amount\"]');\n\n// const submitBtn = form.querySelector('button[type=\"submit\"]'); -> zbędne\n\n// position -> numer promisa\n// delay -> opóźnienie wykonania promisa\n\nfunction createPromise(position, delay) {\n  // wywołanie\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n\n      // generowanie losowego numeru -> jesli większy od 0.3 w zmiennej shouldResolve = resolve(wykonane)\n      // jesl nie jest większy = reject\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// zdarzenie buttona, na formie z sumbitem bez query\nform.addEventListener('submit', event => {\n  event.preventDefault();\n  // numbery do wartości wpisanych w inputy\n  let firstDelay = +delayInput.value;\n  let delayStep = +stepInput.value;\n  let amount = +amountInput.value;\n\n  // iteracja amount do wykonania kolejnej funkcji (sprawdzić czy mozna zapisać inaczej )\n  for (let i = 0; i < amount; i++) {\n    // ok iteracje ujmuje w do działania (suma inputów razy iterowana pozycja (chyba))\n    const promiseDelay = firstDelay + i * delayStep;\n    createPromise(i + 1, promiseDelay)\n      //    if (shouldResolve) {\n      // resolve({ position, delay });\n      // } else {\n      // reject({ position, delay });\n      // }\n      // then + catch\n\n      // wywołanie tekstowe\n      // resolve\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      // reject\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n});\n\n// sorry za ilość komentarzy\n\n\n// Zajęcia przykład:\n// const formEl = document.querySelector(\".form\");\n\n// formEl.addEventListener(\"submit\", (ev) => {\n//   ev.preventDefault();\n  \n//   const formData = new FormData(ev.target);\n//   const firstDelay = +formData.get(\"delay\");\n//   const step = +formData.get(\"step\");\n//   const amount = +formData.get(\"amount\");\n  \n//   for(let i = 0; i < amount; i++) {\n//     createPromise(i + 1, firstDelay + i * step)  \n//       .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n//   }\n \n// })\n\n// function createPromise(position, delay) {\n//   return new Promise ((resolve, reject) => {\n//     setTimeout(() => {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n// resolve({position, delay});\n//   } else {\n// reject({position, delay});\n//   }\n//                      }, delay);\n//   });\n// }\n\n\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delayInput","$ce04d3a99e08e73b$var$stepInput","$ce04d3a99e08e73b$var$amountInput","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","firstDelay","value","delayStep","amount","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.cfadb9f6.js.map"}